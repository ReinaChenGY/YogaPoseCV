# -*- coding: utf-8 -*-
"""CV Assignment3 Deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1XaIPFVCraSr4_Wpynvnek9O41m-3aV
"""

pip install streamlit tensorflow

import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np

# Load your model
@st.cache(allow_output_mutation=True)
def load_model():
    # Update this path to the actual path where you have stored the model on your server
    model_path = '/path_to_deployed_model/vgg16.h5'
    try:
        model = tf.keras.models.load_model(model_path)
        return model
    except Exception as e:
        st.error("Failed to load model, please check the model file and error below.")
        st.error(f"Error: {str(e)}")
        return None

model = load_model()

def predict(image, model):
    if model:
        image = image.resize((224, 224))  # Model expects 224x224 input
        img_array = np.array(image)
        img_array = np.expand_dims(img_array, axis=0)  # Model expects a batch
        predictions = model.predict(img_array)
        predicted_class = np.argmax(predictions, axis=1)[0]
        return predicted_class
    else:
        return "Model not loaded"

def main():
    st.title('Yoga Pose Classification App')
    st.write("Upload an image to predict the yoga pose.")

    uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"])

    if st.button('Predict'):
        if uploaded_file is not None and model is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption='Uploaded Image.', use_column_width=True)
            result = predict(image, model)
            st.write(f'Prediction: {result}')
        elif model is None:
            st.write('Model loading failed, please check the server logs.')
        else:
            st.write('Please upload an image.')

if __name__ == '__main__':
    main()